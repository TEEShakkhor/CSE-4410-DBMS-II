DDL--
DROP TABLE ACCOUNT_PROPERTY CASCADE CONSTRAINTS;
DROP TABLE ACCOUNT CASCADE CONSTRAINTS;
DROP TABLE TRANSACTION CASCADE CONSTRAINTS;
DROP TABLE BALANCE CASCADE CONSTRAINTS;

CREATE TABLE ACCOUNT_PROPERTY(
    AP_ID INT,
    AP_NAME VARCHAR2(100),
    AP_PROFIT_RATE NUMERIC(10,2),
    AP_GRACE_PERIOD INT,
    PRIMARY KEY (AP_ID)
);

CREATE TABLE ACCOUNT(
    A_ID INT,
    A_NAME VARCHAR2(100),
    A_CODE INT,
    OPENING_DATE DATE,
    LAST_DATE_INTEREST DATE,
    PRIMARY KEY (A_ID),
    FOREIGN KEY (A_CODE) REFERENCES ACCOUNT_PROPERTY (AP_ID)
);


CREATE TABLE BALANCE(
    A_ID INT,
    PRINCIPAL_AMOUNT NUMERIC (10, 2),
    PROFIT_AMOUNT NUMERIC(10, 2),
    PRIMARY KEY (A_ID),
    FOREIGN KEY (A_ID) REFERENCES ACCOUNT(A_ID) ON DELETE CASCADE
);

CREATE TABLE TRANSACTION(
    T_ID INT,
    T_A_ID INT,
    T_AMOUNT NUMERIC(10, 2),
    T_DATE DATE,
    PRIMARY KEY (T_ID),
    FOREIGN KEY (T_A_ID) REFERENCES ACCOUNT (A_ID) ON DELETE CASCADE
);

INSERT INTO ACCOUNT_PROPERTY VALUES (2002, 'MONTHLY', 2.8, 1);

INSERT INTO ACCOUNT_PROPERTY VALUES (3003, 'QUARTERLY', 4.2, 4);

INSERT INTO ACCOUNT_PROPERTY VALUES (4004, 'BIYEARLY', 6.8, 6);

INSERT INTO ACCOUNT_PROPERTY VALUES (5005, 'YEARLY', 8, 12);

INSERT INTO ACCOUNT VALUES (1,'SHAKS',5005,TO_DATE('2023-01-31', 'YYYY-MM-DD'), TO_DATE('2023-04-15', 'YYYY-MM-DD'));

INSERT INTO BALANCE VALUES (1,6969,69);

INSERT INTO TRANSACTION VALUES (1,1,31,TO_DATE('2023-04-15', 'YYYY-MM-DD'));

INSERT INTO TRANSACTION VALUES (2,1,369,TO_DATE('2023-04-15', 'YYYY-MM-DD'));

DML--

1--
SET SERVEROUTPUT ON SIZE 1000000

CREATE OR REPLACE FUNCTION CALCULATE_CURRENT_BALANCE(INPUT INT) 
RETURN NUMERIC AS 
TOTAL_TRANSACTION NUMERIC (10,2);
CURRENT_BALANCE NUMERIC (10, 2);
PROFIT NUMERIC (10,2);
RESULT NUMERIC(10, 2);
BEGIN 
SELECT SUM(T_AMOUNT) INTO TOTAL_TRANSACTION
FROM TRANSACTION T, ACCOUNT A
WHERE T.T_A_ID = A.A_ID AND A.A_ID = INPUT
GROUP BY A.A_ID;

SELECT PRINCIPAL_AMOUNT  INTO CURRENT_BALANCE
FROM ACCOUNT A,BALANCE B
WHERE A.A_ID = B.A_ID AND A.A_ID = INPUT;

SELECT PROFIT_AMOUNT  INTO PROFIT
FROM ACCOUNT A,BALANCE B
WHERE A.A_ID = B.A_ID AND A.A_ID = INPUT;
RESULT := CURRENT_BALANCE + TOTAL_TRANSACTION + PROFIT;
RETURN RESULT;
END;
/

DECLARE
    ID INT;
BEGIN
    ID:='&ID';
    DBMS_OUTPUT.PUT_LINE('CURRENT BALANCE '||CALCULATE_CURRENT_BALANCE(ID));
END;
/

2--
SET SERVEROUTPUT ON SIZE 1000000
CREATE OR REPLACE FUNCTION CALCULATE_PROFIT(INPUT INT) 
RETURN VARCHAR2 AS
    INITIAL_BALANCE NUMERIC(10, 2);
    GRACE           INT;
    FINAL_BALANCE   NUMERIC(10, 2);
    PROFIT          NUMERIC(10, 2);
    RATE            NUMERIC(10, 2);
    BEGIN_DATE      DATE;
    CUR_DATE       DATE;
    MONTH           INT;
    CO              INT;
    TOTAL_PROFIT    NUMERIC(10, 2);
    OUTPUT          VARCHAR2(1000);
BEGIN
    BALANCE
    SELECT PRINCIPAL_AMOUNT INTO INITIAL_BALANCE FROM BALANCE
    WHERE A_ID = INPUT;

    PROFIT
    SELECT PROFIT INTO PROFIT FROM BALANCE
    WHERE A_ID = INPUT;

    GRACE
    SELECT AP.AP_GRACE_PERIOD INTO GRACE
    FROM ACCOUNT_PROPERTY AP, ACCOUNT A
    WHERE AP.AP_ID = A.A_CODE AND A.A_ID = INPUT;
    
    RATE
    SELECT AP.AP_PROFIT_RATE INTO RATE
    FROM ACCOUNT_PROPERTY AP, ACCOUNT A
    WHERE AP.AP_ID = A.A_CODE AND A.A_ID = INPUT;
    
    LAST DATE
    SELECT LAST_DATE_INTEREST INTO BEGIN_DATE FROM ACCOUNT
    WHERE A_ID = INPUT;
    
    CURRENT DATE
    SELECT
        TO_DATE(CURRENT_DATE) INTO CUR_DATE
    FROM
        DUAL;

    days := TRUNC(SYSDATE) - TRUNC(BEGIN_DATE);
  
  BALANCE_INCREASE := floor((floor(days / 30))/GRACE);

    BALANCE_AFTER := INITIAL_BALANCE;

  FOR i in 1..BALANCE_INCREASE
  LOOP   
   BALANCE_AFTER := BALANCE_AFTER + RATE*BALANCE_AFTER;
  END LOOP;

  BALANCE_BEFORE := INITIAL_BALANCE;

  PROFIT := BALANCE_AFTER - BALANCE_BEFORE;

  RETURN 'Profit: ' || PROFIT || 'Before Profit: ' || BALANCE_BEFORE || 'After Profit:' || BALANCE_AFTER;
END;
/

DECLARE
    ID number;
BEGIN
    ID := '&ID';
  DBMS_OUTPUT.PUT_LINE(CALCULATE_PROFIT(ID)) ;
END;
/

3--
CREATE OR REPLACE PROCEDURE CALCULATE_PROFIT_ALL
AS
    ACC_ID number;
    OUTPUT varchar2(1000);
    PROFIT number(12,3);

    cursor GET_ALL_ACCOUNT is
    SELECT A_ID FROM Account;

BEGIN
  OPEN GET_ALL_ACCOUNT;
  LOOP
    FETCH GET_ALL_ACCOUNT into ACC_ID;  
    EXIT WHEN GET_ALL_ACCOUNT%notfound;
    OUTPUT := CALCULATE_PROFIT(ACC_ID);
    DBMS_OUTPUT.PUT_LINE('Account ID: ' || ACC_ID || '   ' || OUTPUT );

    SELECT TRIM( ':' FROM REGEXP_SUBSTR( OUTPUT, '\:[^B]+' )) INTO PROFIT FROM DUAL;

    
    UPDATE BALANCE SET PROFIT_AMOUNT = PROFIT WHERE A_ID =  ACC_ID;

    UPDATE BALANCE SET PRINCIPAL_AMOUNT = PRINCIPAL_AMOUNT + PROFIT WHERE A_ID =  ACC_ID;

    UPDATE ACCOUNT_ SET LAST_DATE_INTEREST = SYSDATE WHERE A_ID = ACC_ID;

  END LOOP;
  CLOSE GET_ALL_ACCOUNT;

END;
/

BEGIN
    CALCULATE_PROFIT_ALL();
END;
/